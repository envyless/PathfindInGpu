#include "../../../CommonUtils/Compute/CommonCS.compute"

#pragma kernel CSMain

struct PathInfo
{
    bool IsNotPathAble;
    int Index;

    //position
    float2 position;
    float CostToGoal;
};

struct CalculatePathInfo
{
    int Index;
    float Cost;
    int BaseIndex;
    
    float GetSize()
    {
        return 0;
    }
};

ArrayStruct(CaculatedList, CalculatePathInfo, 100);

// contains all of path info ordered index
RWStructuredBuffer<PathInfo> PathBuffer;
// need calcuate that index
RWStructuredBuffer<CalculatePathInfo> CalcPathBuffer;
int NumWidth;
int NumHeight;
int PlayerIndex, GoalIndex;
float2 PlayerPosition, GoalPosition;

uint GetIndex(uint3 id)
{
    //PathBuffer[id.x].CostToGoal = cc.index;
    return id.x; //+ id.y * NumWidth;
}

float GetCostToGoal(uint from_index, uint goal_index)
{
    PathInfo pathInfoFrom = PathBuffer[from_index];
    //check able to go?
    if (pathInfoFrom.IsNotPathAble)
        return -1;
    
    PathInfo pathInfoGoal = PathBuffer[goal_index];
    float2 toLen = pathInfoGoal.position - pathInfoFrom.position;
    float doubled_len = sqrt(toLen.x * toLen.x + toLen.y * toLen.y);
    
    return doubled_len;
}

CalculatePathInfo CalcPath(int index_from, int index_to, in CalculatePathInfo currentPath)
{
    CalculatePathInfo from_calc_path;
    from_calc_path.Index = index_from;
    from_calc_path.Cost = GetCostToGoal(index_from, GoalIndex) + 1;
    from_calc_path.BaseIndex = currentPath.Index;
    CalcPathBuffer[from_calc_path.Index] = from_calc_path;
    return from_calc_path;
}

int FindIndex(inout CalculatePathInfo target_list[100], int index, int indexOfList)
{
    int iFindIndex = -1;
    int numlist = indexOfList;
    for (int i = 0; i < numlist; ++i)
    {
        if (target_list[i].Index == index)
        {
            iFindIndex = i;
            break;
        }
    }
    
    return iFindIndex;
}

void SwapAndRemove(int target_index, inout CalculatePathInfo openList[100], inout int indexOpenList)
{
    CalculatePathInfo cpi = openList[indexOpenList - 1];
    openList[target_index] = cpi;   
}

void PathFind(int index)
{
    CalculatePathInfo openList[100];
    int indexOpenList = 0;
    //init
    for (int i = 0; i < 100; ++i)
    {
        openList[i].Cost = 0;
        openList[i].Index = -1;
        openList[i].BaseIndex = -1;

    }
    
    
    CalculatePathInfo closeList[100];
    int indexCloseList = 0;
    for (int i = 0; i < 100; ++i)
    {
        closeList[i].Cost = 0;
        closeList[i].Index = -1;
        closeList[i].BaseIndex = -1;
    }
        
    int path[100];
    bool isFind = false;
    
    //current index
    PathInfo pathInfo = PathBuffer[index];
    
    CalculatePathInfo currPathInfo;
    currPathInfo.Index = index;
    currPathInfo.Cost = GetCostToGoal(index, GoalIndex);
    currPathInfo.BaseIndex = index;
    if (index == GoalIndex)
        return;
            
    //start to open list
    openList[indexOpenList] = currPathInfo;
    indexOpenList++;
    
    int loop_count = 0;
    [fastopt]
    do
    {
        if (loop_count > 50)
            break;
        //CalcPathBuffer[loop_count].BaseIndex = indexOpenList;
        loop_count++;
        //when stop? check
        if (indexOpenList == 0 || currPathInfo.Index == GoalIndex)
        {            
            break;
        }
            
        //
        //find cheap cost path
        int findIndex = -1;
        
        [fastopt]
        for (int i = 0; i < indexOpenList; ++i)
        {            
            if (openList[i].Cost <= currPathInfo.Cost)
            {                
                findIndex = i;                               
            }
        }     
        
        if(findIndex != -1)
        {
            //remove current from open list                                        
            //SwapAndRemove(findIndex, openList, indexOpenList);
            currPathInfo = openList[findIndex];
            openList[findIndex] = openList[indexOpenList - 1];
            indexOpenList--;           
        }
        
        //AddCurrent To Close check
        closeList[indexCloseList] = currPathInfo;
        indexCloseList++;
        
        //find goal
        if (currPathInfo.Index == GoalIndex)
        {
            CalcPathBuffer[1].BaseIndex = 300;
            break;
        }            
                
        //foreach neighbour of the current
        //check is not enter? or is already in closelist? skip and next
        index = currPathInfo.Index;
        int indexY = index / NumWidth;
        int indexX = index % NumWidth;
        bool skip = false;
        
        [fastopt]
        //neighbour check
        for (int k = 0; k < 4; ++k)
        {
            int target_index = -1;
            switch (k)
            {
                case 0:
                //safe check & up index check is in close?
                    target_index = index + NumWidth;
                    //skip not safe
                    skip = (indexY + 1 >= NumHeight);
                    break;
                case 1:
                    //down check                    
                    target_index = index - NumWidth;
                    skip = (indexY - 1 < 0);
                    break;
                case 2:
                    //left check
                    target_index = index - 1;
                    skip = (indexX - 1 < 0);
                    break;
                case 3:
                    //right
                    target_index = index + 1;
                    skip = (indexX + 1 >= NumWidth);
                    break;
            }
            if (skip)
                continue;
            
            //is in close? skip
            int indexInClose = FindIndex(closeList, target_index, indexCloseList);
            if (indexInClose != -1)
            {
                CalcPathBuffer[99].BaseIndex = 94;
                continue;
            }
            
            //check is cheaper then before? in open list?
            CalculatePathInfo cpi = CalcPath(target_index, GoalIndex, currPathInfo);
            //is in open list? so which one is cheaper? and then swap that
            //if not in open? so add that
            int indexInOpen = FindIndex(openList, cpi.Index, indexOpenList);
            if (indexInOpen != -1)
            {
                if (openList[indexInOpen].Cost > cpi.Cost)
                    openList[indexInOpen] = cpi;
            }
            else
            {                
                openList[indexOpenList] = cpi;
                indexOpenList++;                
            }
            
            if(loop_count == 1)
                break;
        }
    } while (indexOpenList >= 0);   
    
    for (int i = 0; i < indexOpenList; ++i)
    {
        //CalcPathBuffer[i].BaseIndex = openList[i].BaseIndex;
    }

}

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    NumHeight = 100;
    
    //thread id to index
    uint index = GetIndex(id);
    
    //get calc index
    //int index_to_calc = CalcPathBuffer[ index];
    PathInfo pathInfo = PathBuffer[index];
    //PathFind(PlayerIndex);        
    PathFind(PlayerIndex);
    
}
